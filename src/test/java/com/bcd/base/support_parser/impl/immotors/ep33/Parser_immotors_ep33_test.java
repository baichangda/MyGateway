package com.bcd.base.support_parser.impl.immotors.ep33;

import com.bcd.base.support_parser.Parser;
import com.bcd.base.support_parser.impl.immotors.ep33.data.Packet;
import com.bcd.base.support_parser.processor.Processor;
import com.bcd.base.support_parser.util.CompressUtil;
import com.bcd.base.support_parser.util.PerformanceUtil;
import io.netty.buffer.ByteBuf;
import io.netty.buffer.ByteBufUtil;
import io.netty.buffer.Unpooled;
import org.junit.jupiter.api.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.Base64;


public class Parser_immotors_ep33_test {

    static Logger logger = LoggerFactory.getLogger(Parser_immotors_ep33_test.class);

    @Test
    public void test() {
        Parser.withDefaultLogCollector_parse();
        Parser.withDefaultLogCollector_deParse();
        Parser.enableGenerateClassFile();
//        Parser.enablePrintBuildLog();
//        String base64 = "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";
        String base64 = "H4sIAAAAAAAA/+zZfXQTZb4H8G+gLQFBegvYFqyNUMSXSztJ2pKXlsnL7W1R4OLVopxFiax4sLC0ICiKk40IFlpwEZWisBL1D3tcXBdoKc1MYEoAe1iECOtSEHDKshoVdZaFs0HQ7pmXTJ+GUiPY/cvmhCeZlyeh5/mc7+/3FDrgUd+jK5A0JGRtXXIKyVl/LWyfcxYpQDLQD/3EnI5oBwe97oB0Lfq7sScVZgxoSsJMAIPQf60D0OO5xwFAL10jjX3UsW+fKX8AEE7B+NW2ldUN/sJp+RfrDR2X4cvQISXltct1gA9+ZF/EFN3gi8O2YkQZfqPL1lXe1iSsnLEgBw1RaaZwf6Qh9jNYgA7Jj/oQvgHH5jJRppWJMhEmyrRJoxeM4AXTxoSZNvkRYVqZNkaQXwmMyISZKCN6wUQYkRG8ekZkIvKdItMqHZGfrfLriDyvKM8nyK+lI9IV0kP6JFE9FvVCejBReT5Bni2q3CMfEdVPUN4L8hlp1qg8g3RcORNVv5vg1YcHInPgeBTJj9hYrI7hQcgcSKMYxRiP8dpYJI/hG5GZQRVMnFJyt9ltLjDlU06X20UZKRNlLAgPxkAwwGKjD5nwIpyJ1IOpycWN5T7tFxzOwNBDv95YHXzxqxELAJN54THDd0l9ER6A8on33V1iLqSshZPuM+ZT+daCifeZjG7K6CwwWQspiiq0WC2FlNVkHFdAUZTFWmCi8s0WK2UppMz5JspkoihK+ipGaTSbC6ym/Pxx4TTQuL6fIynYecXBPjo48gJldOPRL9kaAbZnfeBHLH5QPZulA5+XVUXvzt7MzvChSGcAfXzGSvVsPx0czjcr+Zr/amRP+sAN4eE210xVz96qAz/2hTf59Q/9MyAawFE+uM1pVerZTB1aht2jd5YZBfYTD7gXfHA1tE1Wzw7SwVk9t8KVPuZm+yYgONmPELXwb0eA0RgLBFprymxpB/6146OmdPWOjqJ5X9xr+SZ9PthxT32usl3Zle3crDi2e65kuyOe7ezrYbup49OubG9pqRxdLfhmVF2dre5t/ML2Otg+Hc/2fr4ntn6ZbS/qos4L9LYxh9haB2x3+sEXV3xM6Mp1ivTeAyfYJA+KlvnhmHbsJUKX69Vd/Mq75nKDAXaBAW7z9i8JXbkDHuDrdpwPrHaAuwVwm1M/IHV9/JyzbM1bbKsB3DOSrsB6QteKDW+7MvTD7ZsMCBr9CBlzCjRdmyKzrSumbLRNvVCi6aoc3mxpH/01WGrou6qumjhdN/14KF6hK4FQfETWVaDrLhQNunhdSeOEmk0LctCI7nV1H4rKmg9LT02XEKerTVahKBFUITFd6hUMr+kSCF2CfJ9yrciIqpt4XYoqUb1HVD+tTf2OgqwrIuuOKqrkd1H13+vUVZSQLm83usr9Peg6buhtXXl/p+gtTW+wyx2wZzjA6yeMJnTlVe2hd3va2QoHiuCAY9a0G0hdOav4Fc0HuXt4WO/3w20uBalr8Vm+Lmc+m8SDm+lDyLx7MKnrsRudE0Y+xR71g6sAXM12G6krHHJlPDHV7vMjWGBAKO+LLaSuwNi+x21PVpRruuZ97bUO8S4Ge+e+11VdtXG6BhG6/rvjckK6Esiu5OqGNYWPxOla1/FDN7rkkrN9QEK6vJB1xbyoa1POh1h2haX1LD9jCSeqq1vRFUubsPpK8hiWjysiIp26YmbkOfTdZlenrgiRSAKRXco9oqopll0xrd3rKu5Ol5JV9LVk1zNUF11ZjeWGnnT1enbl7ppGb1l7mK0E7FkAn3f+/0hd+7bQLQtnspP8KCrn4Ri37X8JXW7Xh3xtaz37Zx+4Gz1wm5c8TOq6tJWvO/daoAXgHjcgZH7TTOoa7HaWnfGzpwVwc3i42IcaSV2bd7kyvGmyLqeUXW5LTJe11BYMLN+yfMeYvZs1XZVcmnWw/TTYOz5KUnWtitM1kNB1+89XGQ7qTpdaGQpXZNdtTe39Zyy8ui6tMvxFF30t2UXq+lCUdHl60PVJr2eXaez79Pb2iewrPtg28uBLl9UTunI/09F73zjFVnhQZPTAUbprAKHLlTaHX2Gt4gYawJ52wG1qn0XqGnmaX7f4eOBTP7g5UnZtXU3oGhJsdZZl/4lt8YBbLsDF0rmkrtcOu9L3LLZXexC824CQsZ+P1GXhds60Pfb+h526bl5rObvhMNjb6h9Wda2O2y45Q+iigJ83u+L6Ljm7rui7snWVKYlul8hVoFp1ddZVWlXYJtd9XXRJojRdnV2RUll26lLm1EQonVqcrqhWGeq9kN7LxyJddCmG2mR7UHXJqqV7lLmUUXWoXJWaiK7ia9c1vyROV4991ye933c1j6K3LJzO1nqw44AAftI/9hK68g4tokMPZrEzfbDvdoA+vv1WQpfj8Dy+tm8bV+oDV8nDbV55F6lr2kJ+ffb/swMAbonUd438jNA1tG+ts7RsBqczgHudh6vhL9NJXYZFrvRz2XavAcGJPoSMn3ZolSH90NOBnYO+toUmjtB0VeUusXQ0bAV7e8nvVV0vxun64Rr6rkSzK77v6r4yvKWlMuVHsiteF9nnkLqUPkox1qkrSuiKarpaNaWtWh7GhES0lInXJaq69Iou9druskt5n6r2XaKSdopZRZumS9B0FfdSdv00XSd6v+86Eaa3PZ/PLvfBHvaBT/s2SujKPeunuf85wM7ywf62AQ73vesJXa6KDfyK/W72A4DdZ4DbnLOU0DX2vdl83bxF7BADuCIH3ObRR0hdO484yyIn2YMGcLP9cAUqg6QuxxJXupBurzEgOMmBkDmvXtN1KEPXfKl+aTOZXVXl31pHn1sGdswHg1Rdv4urDClClyXByjCBXY1hP6nvShrXjp6yi6wMu+rSq7sQscQSycrQC1WXXrYSiemS13lY28kId+7xxXQpuxPyzGK8Lim3fkyXurshelNlT3IaxmeXknPy/6C3dS2YEl8Z9rTVf6L3s6vve3SD9w52ng82mwf81D9eIHTllYt0cM5Bdg5QlAzQZ/OdpK5D9Xzt97NZVgA3XNI1/GVSlz+JX7e9nB3gALdKQMi89AKha5jvkrP0mzNyZVjrh2vr83NIXXlfudK9e+wvA0GXlF1zn47psiypX2p7sqK8mdyRnz+NtrQ0fAc2R79f1bUmTteouL6L/3mya1h32XXVviu5+tp2NaTV3KbtyAuyqSsrwyix9mN9l6QromVX+Bp0QakOY8mkKtN3Jp5WGcauiCozqLqgZpc+0b7rOirDrrqSTvacXScN3yX1EXq178p+iW5MucSu9cNaC/COU6MIXbmzxtN7jC+zj3hgfx6gz/WZTOhyZn7E18ydzB7kwY2QKkNxOqErV3+Kf3XfDazeA26CH26zayup6+h+Z2nLA1ySA9wyAa7tx5JJXZsPuzL079jX+BAs8SBkfC8S07XjUv1Sqeeybbi4T9NV9fEh603PLgN7+/6Nqq6X4nSt6FIZXk5IVwLZlSXrSujP1HJlqOzIJ9R3qas/toIVXWRlqBgTVV16QlcqoatV/evT1XRFVF2xbgxa3yV6U9W+KzWWU5qu1M5dDaWj6qwMO3V1qQz1/4G+6wkzuWeY9H1jOXrS1evZlbexD72NLmKfExBo8oHPLJ1C6Mqzj6L3zX2XHQsUjfTDMX0IR+hyfB7mV9WVsO94wNVJnVXfZkLX2L0hfv2OpsA5P7hJPNymM7WErpvAOCc8mM2W+sEVCHA1vJ5K6Ko+esGVPmmovc6PYIkDIarjvFYZ5r0lWu9tSg9Me+VXmq4FyYss72I62Lv2z+voAH677tm6fwcAAP//BBRMsg0iAAA=";
        final byte[] bytes = CompressUtil.unGzip(Base64.getDecoder().decode(base64), 8192);
        final String data = ByteBufUtil.hexDump(bytes);
//        final String data
//        final byte[] bytes = ByteBufUtil.decodeHexDump(data);
        ByteBuf byteBuf = Unpooled.wrappedBuffer(bytes);
        final Processor<Packet> processor =Parser.getProcessor(Packet.class);
        Packet packet = processor.process(byteBuf, null);
        ByteBuf dest = Unpooled.buffer();
        processor.deProcess(dest, null,packet);
        logger.info(data.toUpperCase());
        logger.info(ByteBufUtil.hexDump(dest).toUpperCase());
        assert data.equalsIgnoreCase(ByteBufUtil.hexDump(dest));
    }

    @Test
    public void test_performance() {
//        Parser.enablePrintBuildLog();
        Parser.enableGenerateClassFile();
//        Parser.withDefaultLogCollector_parse();
//        Parser.withDefaultLogCollector_deParse();
//        Parser.enablePrintBuildLog();
//        String base64 = "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";
//        final byte[] bytes = CompressUtil.unGzip(Base64.getDecoder().decode(base64), 8192);
        final String data
        final byte[] bytes = ByteBufUtil.decodeHexDump(data);
        final String hex = ByteBufUtil.hexDump(bytes);
        logger.info(hex);
        int threadNum = 1;
        logger.info("param threadNum[{}]", threadNum);
        int num = 100000000;
        PerformanceUtil.testMultiThreadPerformance(ByteBufUtil.decodeHexDump(hex), Packet.class, threadNum, num, true);
    }
}
